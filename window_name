#!/usr/bin/env python3

import sys
import argparse
import time
import cgi
import threading
import i3ipc


parser = argparse.ArgumentParser()
parser.add_argument('--refresh-time', '-r', type=float, default=0.5, \
      help='Interval for when to check data in seconds (float)')
parser.add_argument('--text-refresh-rate', '-R', type=float, default=1, \
      help='Interval for text rotation:' \
      'index will be increased by x for every r')
parser.add_argument('--string-length', '-l', type=int, default=25, \
      help='Total length of printed string')
parser.add_argument('--pango', '-m', action='store_true', \
      help='Enables printing with pango markup. ' \
      ' Required for some unicode symbols.')
#parser.add_argument('--unicode-font', type=str, \
#      default='Font Awesome 5 Free Solid', \
#      help='Font for drawing unicode symbols')
#parser.add_argument('--regular-font', type=str, \
#      default='DejaVu Sans Mono', \
#      help='Font for regular text')

args = parser.parse_args()

exit_flag = 0
index = 0.0
info_string = " " * args.string_length
program = ""
name = ""
floating = False
popup = False
urgent = False

class printThread(threading.Thread):
    def __init__(self, threadID, name, counter):
        threading.Thread.__init__(self)
        self.ThreadID = threadID
        self.name = name
        self.counter = counter
    def run(self):
        print_title(self.name, self.counter)

def print_title(thread_name, delay):
    global index
    global info_string
    while True:
        if exit_flag:
            threadName.exit()

        time.sleep(delay)

        program_string = "[%s]" % program
        remaining_length = args.string_length - len(program_string)

        if len(name) <= remaining_length - 2:
            name_string = name.center(remaining_length, ' ')
            index = 0.0
        else:
            index = (index + args.text_refresh_rate) % (len(name) + 4)
            end = int(index) + remaining_length - 3
            name_string = name + " ++ " + name
            name_string = name_string[int(index):end]
            name_string = name_string.center(remaining_length, ' ')

        if args.pango:
            program_string = cgi.escape(program_string, quote=True)
            name_string = cgi.escape(name_string, quote=True)

            if urgent:
                info_string = \
                        '<span foreground="#FFFFFF" ' \
                        'background="#FF0000">' \
                        '<b>%s</b><i>%s</i></span>' % (program_string, name_string)
            elif popup:
                info_string = \
                        '<span foreground="#000000" ' \
                        'background="#FF9966">' \
                        '<b>%s</b><i>%s</i></span>' % (program_string, name_string)
            elif floating:
                info_string = \
                        '<span foreground="#000000" ' \
                        'background="#FFFF00">' \
                        '<b>%s</b><i>%s</i></span>' % (program_string, name_string)
            else:
                info_string = '<span><b>%s</b><i>%s</i></span>' % (program_string, name_string)
        else:
            info_string = program_string + name_string
        print(info_string)
        sys.stdout.flush()



def on_window_focus(i3, e):
    focused = i3.get_tree().find_focused()
    set_info_string(focused)

def on_workspace_focus(self, e):
    if e.current:
        try:
            w = e.find_focused()
            set_info_string(w)
        except:
            set_info_string(None)

def set_info_string(window):
    global name
    global program
    global floating
    global popup
    global urgent
    if window is None or window.type == 'workspace':
        name = '[none]'
        program = ''
    else:
        floating = False
        popup = False
        urgent = window.urgent
        if "on" in window.floating:
            floating = True
        if window.window_role == "pop-up":
            popup = True
        program = window.window_class
        name = window.name

try:
    thread1 = printThread(1, "Thread-1", args.refresh_time)
    i3 = i3ipc.Connection()
    focused = i3.get_tree().find_focused()
    set_info_string(focused)
    i3.on('window::focus', on_window_focus)
    i3.on('window::title', on_window_focus)
    i3.on('window::floating', on_window_focus)
    i3.on('window::urgent', on_window_focus)
    i3.on('window::close', on_window_focus)
    i3.on('workspace::focus', on_workspace_focus)
    #TODO window close, open
    thread1.start()
    i3.main()
    thread1.join()
except:
    exit_flag = 1

